//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExamsGenerator
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ExamsEntities : DbContext
    {
        public ExamsEntities()
            : base("name=ExamsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Answer> Answers { get; set; }
        public virtual DbSet<AnswerToQuestion> AnswerToQuestions { get; set; }
        public virtual DbSet<Class> Classes { get; set; }
        public virtual DbSet<DegreeOfDifficulty> DegreeOfDifficulties { get; set; }
        public virtual DbSet<DegreeOfDifficultyToLevel> DegreeOfDifficultyToLevels { get; set; }
        public virtual DbSet<DegreeOfDifficultyToLevelOfEducation> DegreeOfDifficultyToLevelOfEducations { get; set; }
        public virtual DbSet<EducationSystem> EducationSystems { get; set; }
        public virtual DbSet<ExamCandidateHeader> ExamCandidateHeaders { get; set; }
        public virtual DbSet<ExamCandidateLine> ExamCandidateLines { get; set; }
        public virtual DbSet<ExamCompositionLine> ExamCompositionLines { get; set; }
        public virtual DbSet<ExamDeliveryHeader> ExamDeliveryHeaders { get; set; }
        public virtual DbSet<ExamDeliveryLine> ExamDeliveryLines { get; set; }
        public virtual DbSet<ExamOrder> ExamOrders { get; set; }
        public virtual DbSet<ExamOrderItem> ExamOrderItems { get; set; }
        public virtual DbSet<ExamOrderShuffleHeader> ExamOrderShuffleHeaders { get; set; }
        public virtual DbSet<ExamOrderShuffleLine> ExamOrderShuffleLines { get; set; }
        public virtual DbSet<ExamOrderStatu> ExamOrderStatus { get; set; }
        public virtual DbSet<ExamOrderStatusLog> ExamOrderStatusLogs { get; set; }
        public virtual DbSet<ExamStatu> ExamStatus { get; set; }
        public virtual DbSet<Institute> Institutes { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<LevelOfEducationInternational> LevelOfEducationInternationals { get; set; }
        public virtual DbSet<LevelOfEducationLocal> LevelOfEducationLocals { get; set; }
        public virtual DbSet<Question> Questions { get; set; }
        public virtual DbSet<QuestionToSubject> QuestionToSubjects { get; set; }
        public virtual DbSet<QuestionType> QuestionTypes { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Subject> Subjects { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<vwCandidateExamHeader> vwCandidateExamHeaders { get; set; }
        public virtual DbSet<vwExamResult> vwExamResults { get; set; }
    
        public virtual int usp_AssignExamToCandidate(Nullable<int> orderID, Nullable<int> candidateID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var candidateIDParameter = candidateID.HasValue ?
                new ObjectParameter("CandidateID", candidateID) :
                new ObjectParameter("CandidateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AssignExamToCandidate", orderIDParameter, candidateIDParameter);
        }
    
        public virtual int usp_CreateExamDeliveryFromShuffle(Nullable<int> examOrderID, Nullable<int> shuffleID)
        {
            var examOrderIDParameter = examOrderID.HasValue ?
                new ObjectParameter("ExamOrderID", examOrderID) :
                new ObjectParameter("ExamOrderID", typeof(int));
    
            var shuffleIDParameter = shuffleID.HasValue ?
                new ObjectParameter("ShuffleID", shuffleID) :
                new ObjectParameter("ShuffleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateExamDeliveryFromShuffle", examOrderIDParameter, shuffleIDParameter);
        }
    
        public virtual ObjectResult<usp_CreateExamShuffle_Result> usp_CreateExamShuffle(Nullable<int> examOrderID)
        {
            var examOrderIDParameter = examOrderID.HasValue ?
                new ObjectParameter("ExamOrderID", examOrderID) :
                new ObjectParameter("ExamOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CreateExamShuffle_Result>("usp_CreateExamShuffle", examOrderIDParameter);
        }
    }
}
